FROM ubuntu:16.04
MAINTAINER jeremiah.liou@icuro.com

############################################################
################### Setup ROCm-docker ######################
############################################################

# This ROCm-docker part is from the author below
# FROM ubuntu:16.04
# MAINTAINER Peng Sun <Peng.Sun@amd.com>

# Initialize the image
# Modify to pre-install dev tools and ROCm packages
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends curl && \
  curl -sL http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add - && \
  sh -c 'echo deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main > /etc/apt/sources.list.d/rocm.list' && \
  apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  sudo \
  libelf1 \
  libnuma-dev \
  build-essential \
  git \
  vim-nox \
  cmake-curses-gui && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Grant members of 'sudo' group passwordless privileges
# Comment out to require sudo
COPY sudo-nopasswd /etc/sudoers.d/sudo-nopasswd

############################################################
################### Install rock ######################
############################################################

# This rock installation is also from the ROCm-docker repository

# Initialize the image we are working with
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  crda \
  wireless-crda \
  build-essential \
  bc \
  git && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# App specific environment variables
ENV ROCK_BUILD_PATH=/usr/local/src/ROCK-Kernel-Driver

RUN mkdir -p /usr/local/src && \
  cd /usr/local/src && \
  git clone https://github.com/RadeonOpenCompute/ROCK-Kernel-Driver.git && \
  cd ROCK-Kernel-Driver && \
  git checkout dev && \
  make mrproper && \
  mkdir -p /etc/udev/rules.d && \
  echo "KERNEL==\"kfd\", MODE=\"0666\"" >> /etc/udev/rules.d/kfd.rules

COPY rock.config /usr/local/src/ROCK-Kernel-Driver/.config

############################################################
################### Install rocm-dkms ######################
############################################################

RUN sudo apt-get update && sudo apt-get install -y rocm-dkms

############################################################
################### Setup Environment ######################
############################################################

CMD ["/bin/bash"]

WORKDIR /root

RUN /bin/bash -c " \
   apt-get update; \
   apt-get install -y sudo wget tar bzip2"

RUN /bin/bash -c " \
   export USERNAME=boat; \
   useradd -m \$USERNAME; \
   usermod --shell /bin/bash \$USERNAME; \
   usermod -aG sudo \$USERNAME; \
   echo \"\$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/\$USERNAME; \
   chmod 0440 /etc/sudoers.d/\$USERNAME; \
   usermod --uid 1000 \$USERNAME; \
   groupmod --gid 1000 \$USERNAME; \
   usermod -a -G video boat"

# Change user
USER boat

WORKDIR /home/boat

ENV PATH "${PATH}:/opt/rocm/bin"
ENV LANG="en_US.UTF-8"

RUN /bin/bash -c " \
   sudo apt-get install -y vim tmux git nautilus locales gksu gnome-terminal xterm lxterminal gconf-2.0 libcanberra-gtk3-module libcanberra-gtk*; \
   sudo locale-gen \"en_US.UTF-8\"; \
   echo \"set mouse=a\" >> ~/.vimrc; \
   echo \"set -g mouse on\" >> ~/.tmux.conf; \
   echo \"set-option -g repeat-time 0\" >> ~/.tmux.conf; \
   echo \"set -g default-terminal \"screen-256color\"\" >> ~/.tmux.conf; \
   echo \"bind h select-pane -L\" >> ~/.tmux.conf; \
   echo \"bind j select-pane -D\" >> ~/.tmux.conf; \
   echo \"bind k select-pane -U\" >> ~/.tmux.conf; \
   echo \"bind l select-pane -R\" >> ~/.tmux.conf; \
   echo \"export LANG=\"en_US.UTF-8\"\" >> ~/.bashrc; \
   echo \"gsettings set org.gnome.Terminal.Legacy.Settings default-show-menubar false\" >> ~/.bashrc; \
   gconftool-2 --set \"/apps/gnome-terminal/profiles/Default/use_theme_background\" --type bool false; \
   gconftool-2 --set \"/apps/gnome-terminal/profiles/Default/use_theme_colors\" --type bool false; \
   gconftool-2 --set "/apps/gnome-terminal/profiles/Default/foreground_color" --type string \"#FFFFFF\"; \
   gconftool-2 --set \"/apps/gnome-terminal/profiles/Default/background_color\" --type string \"#230A30\""

############################################################
##################### Install ROS ##########################
############################################################

RUN sudo /bin/bash -c " \
   # Install ROS
      sudo echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" >> /etc/apt/sources.list.d/ros-latest.list; \
      sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116; \
      sudo apt-get update; \
      sudo apt-get install -y ros-kinetic-desktop-full; \
      echo \"export QT_X11_NOMITSHM=1\" >> ~/.bashrc"

RUN /bin/bash -c " \
   # Rosdep init and update
      sudo rosdep init; \
      rosdep update"

############################################################
########### Install rgbdslam_v2 Dependencies ###############
############################################################

RUN sudo /bin/bash -c " \
    # Install g2o dependencies
       sudo apt-get install -y libsuitesparse-dev ros-kinetic-openni-launch libglew-dev libdevil1c2 libdevil-dev; \
    # Install Eigen headers
       cd ~; \
       mkdir deps; \
       cd deps; \
       wget http://bitbucket.org/eigen/eigen/get/3.2.10.tar.bz2; \
       mkdir eigen; \
       tar -xvjf 3.2.10.tar.bz2 -C eigen --strip-components 1; \
    # Clone g2o fork
       cd ~/deps; \
       git clone https://github.com/felixendres/g2o.git; \
       cd ~/deps/g2o; \
       mkdir build; \
       cd build; \
       sed -i '/SET(G2O_EIGEN3_INCLUDE\ \${EIGEN3_INCLUDE_DIR}/c\SET(G2O_EIGEN3_INCLUDE\ \"\/home\/boat\/deps\/eigen\"\ CACHE\ PATH\ \"Directory\ of\ Eigen3\")' /home/boat/deps/g2o/CMakeLists.txt; \
       cmake ../; \
       make -j$(nproc); \
       sudo make install; \
       sudo ldconfig; \
    # Install PCL 1.8
       cd ~/deps; \
       wget https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.0.tar.gz; \
       tar -xvzf pcl-1.8.0.tar.gz; \
       cd ~/deps/pcl-pcl-1.8.0; \
       sed -i '146iSET(CMAKE_CXX_FLAGS\ \"\${CMAKE_CXX_FLAGS}\ -std=c++11\")' CMakeLists.txt; \
       mkdir build; \
       cd build; \
       cmake ../; \
       make -j1; \
       sudo make install; \
       sudo ldconfig"

############################################################
################## Install OpenCV ##########################
############################################################

RUN /bin/bash -c " \
   sudo apt-get update; \
   sudo apt-get install -y python-rosinstall python-rosinstall-generator python-wstool \
                           build-essential cmake-qt-gui \
                           make cmake cmake-curses-gui g++ \
                           libglew-dev libtiff5-dev zlib1g-dev libjpeg-dev libpng12-dev \
                           libjasper-dev libavcodec-dev libavformat-dev libavutil-dev \
                           libpostproc-dev libswscale-dev libeigen3-dev libtbb-dev \
                           libgtk2.0-dev \
                           cmake \
                           pkg-config; \
   sudo apt-get install -y python-dev python-numpy python-py python-pytest \
                           python3-dev python3-numpy python3-py python3-pytest \
                           libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev; \
   git clone https://github.com/opencv/opencv.git; \
   cd opencv; \
   git checkout -b v3.4.3 3.4.3; \
   cd ~/opencv; \
   mkdir build; \
   cd build; \
   cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DBUILD_PNG=OFF \
    -DBUILD_TIFF=OFF \
    -DBUILD_TBB=OFF \
    -DBUILD_JPEG=OFF \
    -DBUILD_JASPER=OFF \
    -DBUILD_ZLIB=OFF \
    -DBUILD_opencv_java=OFF \
    -DBUILD_opencv_python2=ON \
    -DBUILD_opencv_python3=ON \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    -DWITH_OPENCL=ON \
    -DWITH_OPENMP=OFF \
    -DWITH_FFMPEG=ON \
    -DWITH_GSTREAMER=ON \
    -DWITH_GSTREAMER_0_10=OFF \
    -DWITH_GTK=ON \
    -DWITH_VTK=OFF \
    -DWITH_OPENVX=ON \
    -DWITH_TBB=ON \
    -DWITH_1394=OFF \
    -DWITH_OPENEXR=OFF \
    ../; \
   make -j$(nproc); \
   sudo make install; \
   sudo ldconfig; \
   echo \"export CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH\" >> ~/.bashrc; \
   echo \"export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\" >> ~/.bashrc; \
   echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc"

############################################################
#################### Install OpenVX ########################
############################################################

RUN /bin/bash -c " \
   # Link OpenCL with /usr/lib /usr/include
      sudo ln -s /opt/rocm/opencl/lib/x86_64/libOpenCL.so /usr/lib; \
      sudo ln -s /opt/rocm/opencl/lib/x86_64/libOpenCL.so /usr/lib/x86_64-linux-gnu; \
      sudo ln -s /opt/rocm/opencl/include/CL /usr/include; \
      sudo ln -s /opt/rocm/opencl/include/CL /usr/include/x86_64-linux-gnu; \
      cd ~; \
      sudo apt-get update; \
      sudo apt-get install -y libprotobuf-dev; \
   # Install MIVisionX
      sudo apt-get install -y mivisionx; \
      sudo ln -s /opt/rocm/mivisionx/lib/libopenvx.so /usr/lib; \
      sudo ln -s /opt/rocm/mivisionx/lib/libopenvx.so /usr/lib/x86_64-linux-gnu; \
      sudo ln -s /opt/rocm/mivisionx/include/VX /usr/include; \
      sudo ln -s /opt/rocm/mivisionx/lib/libvx_opencv.so /usr/lib; \
      sudo ln -s /opt/rocm/mivisionx/lib/libvx_opencv.so /usr/lib/x86_64-linux-gnu"
